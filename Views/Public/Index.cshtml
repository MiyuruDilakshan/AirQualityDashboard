@model IEnumerable<AirQualityDashboard.Models.Sensor>
@{
    ViewData["Title"] = "Air Quality Map";
    Layout = "_Layout"; // Ensure the shared layout is applied
}

<!-- Add Bootstrap CSS -->
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">

<!-- Custom Styles -->
<style>
    /* Main container */
    #container {
        display: flex;
        flex-direction: column;
        gap: 20px;
        margin-bottom: 20px;
    }

    /* Map container */
    #map-container {
        flex: 1;
        height: 500px;
        border-radius: 15px;
        overflow: hidden;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    }

    /* Legend container */
    #legend-container {
        width: 100%;
        max-width: 300px;
        padding: 20px;
        border: 1px solid #ddd;
        background: #fff;
        border-radius: 15px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    }

    /* Historical data container */
    #historical-data-container {
        margin-top: 20px;
        padding: 20px;
        border: 1px solid #ddd;
        background: #f9f9f9;
        border-radius: 15px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        margin-bottom: 80px; /* Add margin to avoid overlapping with the bottom nav bar */
    }

    /* Time period buttons */
    .time-period-buttons {
        display: flex;
        gap: 10px;
        margin-bottom: 20px;
    }

        .time-period-buttons button {
            padding: 10px 20px;
            border: none;
            border-radius: 10px;
            background-color: #007bff;
            color: white;
            font-size: 14px;
            cursor: pointer;
            transition: background-color 0.3s ease, transform 0.2s ease;
        }

            .time-period-buttons button:hover {
                background-color: #0056b3;
                transform: translateY(-2px);
            }

            .time-period-buttons button:active {
                transform: translateY(0);
            }

    /* Chart container */
    #historical-chart-container {
        width: 100%;
        height: 400px;
    }

    /* Popup styling */
    .leaflet-popup-content {
        font-family: Arial, sans-serif;
    }

    .leaflet-popup-content-wrapper {
        border-radius: 15px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
    }

    .leaflet-popup-content b {
        font-size: 16px;
        color: #333;
    }

    .leaflet-popup-content button {
        margin-top: 10px;
        padding: 8px 16px;
        background-color: #28a745;
        color: white;
        border: none;
        border-radius: 10px;
        cursor: pointer;
        transition: background-color 0.3s ease;
    }

        .leaflet-popup-content button:hover {
            background-color: #218838;
        }

    /* Map marker animations */
    @@keyframes pulse {
        0% {
            transform: scale(1);
        }

        50% {
            transform: scale(1.1);
        }

        100% {
            transform: scale(1);
        }
    }

    .leaflet-marker-icon {
        transition: transform 0.3s ease;
    }

        .leaflet-marker-icon:hover {
            animation: pulse 1s infinite;
        }

    /* Chart animations */
    canvas {
        transition: opacity 0.5s ease;
    }

        canvas:hover {
            opacity: 0.9;
        }
</style>

<h2 class="text-center mb-4">Air Quality Map - Colombo</h2>

<div id="container">
    <!-- Map and Legend -->
    <div class="row">
        <div class="col-md-9">
            <!-- Increased width of the map container -->
            <div id="map-container">
                <div id="map" style="height:100%;"></div>
            </div>
        </div>
        <div class="col-md-3">
            <!-- Adjusted width of the legend container -->
            <div id="legend-container">
                <h3 class="text-center"><b>AQI LEGEND</b></h3>
                <ul class="list-unstyled">
                    <li><span style="color:green; font-size:30px;">●</span> Good</li>
                    <li><span style="color:yellow; font-size:30px;">●</span> Moderate</li>
                    <li><span style="color:red; font-size:30px;">●</span> Unhealthy</li>
                </ul>
            </div>
        </div>
    </div>

    <!-- Historical Data -->
    <div id="historical-data-container">
        <h3 class="text-center">Historical Data</h3>
        <div class="time-period-buttons justify-content-center">
            <button onclick="updateChart('day')">Last Day</button>
            <button onclick="updateChart('week')">Last Week</button>
            <button onclick="updateChart('month')">Last Month</button>
        </div>
        <div id="historical-chart-container">
            <canvas id="historical-chart"></canvas>
        </div>
    </div>
</div>

<!-- Include Leaflet CSS and JS -->
<link rel="stylesheet" href="https://unpkg.com/leaflet/dist/leaflet.css" />
<script src="https://unpkg.com/leaflet/dist/leaflet.js"></script>

<!-- Include Chart.js for historical data visualization -->
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

<script>
    // Initialize the map centered on Colombo
    var map = L.map('map').setView([6.9271, 79.8612], 12);

    // Add OpenStreetMap tiles
    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
        maxZoom: 19
    }).addTo(map);

    // Get sensor data passed from the controller
    var sensors = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model));

    // Variables to store historical data and chart instance
    var historicalData = {};
    var historicalChart = null;

    // Helper function to simulate historical data for different time periods
    function generateHistoricalData(currentAQI, period) {
        var readings = [];
        var labels = [];
        var now = new Date();
        var dataPoints = 24; // Default to 24 hours for last day

        if (period === 'week') {
            dataPoints = 7; // 7 days for last week
        } else if (period === 'month') {
            dataPoints = 30; // 30 days for last month
        }

        for (var i = 0; i < dataPoints; i++) {
            var simulatedAQI = currentAQI + Math.floor(Math.random() * 21) - 10;
            readings.push(simulatedAQI);

            var time;
            if (period === 'day') {
                time = new Date(now.getTime() - i * 3600000); // Hours for last day
                labels.push(time.toLocaleTimeString());
            } else if (period === 'week') {
                time = new Date(now.getTime() - i * 86400000); // Days for last week
                labels.push(time.toLocaleDateString());
            } else if (period === 'month') {
                time = new Date(now.getTime() - i * 86400000); // Days for last month
                labels.push(time.toLocaleDateString());
            }
        }

        return {
            labels: labels.reverse(),
            data: readings.reverse()
        };
    }

    // Function to update the chart based on the selected time period
    function updateChart(period) {
        if (!historicalData.currentAQI || !historicalData.sensorIdentifier) return;

        var simulatedHistory = generateHistoricalData(historicalData.currentAQI, period);
        var canvas = document.getElementById("historical-chart");

        if (historicalChart) {
            historicalChart.destroy(); // Destroy the existing chart
        }

        historicalChart = new Chart(canvas, {
            type: 'line',
            data: {
                labels: simulatedHistory.labels,
                datasets: [{
                    label: 'AQI Over Time',
                    data: simulatedHistory.data,
                    borderColor: 'blue',
                    borderWidth: 2,
                    fill: false
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                animation: {
                    duration: 1000, // Smooth animation
                    easing: 'easeInOutQuad'
                },
                scales: {
                    y: {
                        min: 0,
                        max: 300,
                        ticks: {
                            stepSize: 50,
                            callback: function(value) {
                                return value;
                            }
                        }
                    }
                }
            }
        });
    }

    // Add markers for each sensor
    sensors.forEach(function(sensor) {
        // For simulation, generate a random current AQI value for this sensor
        var currentAQI = Math.floor(Math.random() * 300);
        var markerColor = currentAQI <= 50 ? 'green' : (currentAQI <= 100 ? 'yellow' : 'red');

        var marker = L.circleMarker([sensor.Latitude, sensor.Longitude], {
            color: markerColor,
            radius: 8,
            fillOpacity: 0.8
        }).addTo(map);

        marker.bindPopup("Loading data...");

        marker.on('click', function() {
            var simulatedHistory = generateHistoricalData(currentAQI, 'day');
            // Create a fixed-size container for the chart.
            var chartHtml = '<div style="width:300px; height:200px;">' +
                            '<canvas id="chart-' + sensor.Id + '" style="width:300px; height:200px;"></canvas>' +
                            '</div>';

            marker.setPopupContent(`
                <b>Sensor: ${sensor.SensorIdentifier}</b><br/>
                Current AQI: ${currentAQI}<br/>
                ${chartHtml}
                <button onclick="showHistoricalData('${sensor.SensorIdentifier}', ${currentAQI})">View Historical Data</button>
            `);

            setTimeout(function() {
                var canvas = document.getElementById("chart-" + sensor.Id);
                if (canvas) {
                    new Chart(canvas, {
                        type: 'line',
                        data: {
                            labels: simulatedHistory.labels,
                            datasets: [{
                                label: 'AQI Over Time',
                                data: simulatedHistory.data,
                                borderColor: 'blue',
                                borderWidth: 2,
                                fill: false
                            }]
                        },
                        options: {
                            responsive: false,
                            maintainAspectRatio: false,
                            scales: {
                                y: {
                                    min: 0,
                                    max: 300,
                                    ticks: {
                                        stepSize: 50,
                                        callback: function(value) {
                                            return value;
                                        }
                                    }
                                }
                            }
                        }
                    });
                }
            }, 500);
        });
    });

    // Function to show historical data below the map
    function showHistoricalData(sensorIdentifier, currentAQI) {
        historicalData = {
            sensorIdentifier: sensorIdentifier,
            currentAQI: currentAQI
        };

        updateChart('day'); // Default to last day
    }
</script>